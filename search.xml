<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Verilog</title>
    <url>/2022/12/12/Verilog/</url>
    <content><![CDATA[<p>本文记录寒假器件自学verilog的笔记。</p>
<span id="more"></span>
<h1 id="第二章-Verilog语法的基本概念"><a href="#第二章-Verilog语法的基本概念" class="headerlink" title="第二章 Verilog语法的基本概念"></a>第二章 Verilog语法的基本概念</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>VerilogHDL描述的电路设计为该电路的Verilog HDL模型，也称为模块。VerilogHDL即使一种行为描述语言也是一种结构描述语言。可以将功能行为模块通过工具自动的转换为门级互联的结构模块。<br>它可以是实际电路不同级别的抽象</p>
<ul>
<li>系统级</li>
<li>算法级 algorithm level</li>
<li>RTL级 register transfer level<br>（以上三种属于行为级，只有RTL级彩玉逻辑电路有明确的对应关系）</li>
<li>门级</li>
<li>开关级</li>
</ul>
<h2 id="2-2-Verilog模块的基本概念"><a href="#2-2-Verilog模块的基本概念" class="headerlink" title="2.2 Verilog模块的基本概念"></a>2.2 Verilog模块的基本概念</h2><p>先用例子了解Verilog模块的特性：</p>
<ul>
<li><p>多路选择器<img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221227160423.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> muxtwo(out,a,b,sl);</span><br><span class="line"><span class="keyword">input</span> a,b,sl;<span class="comment">//输入信号名</span></span><br><span class="line"><span class="keyword">output</span> out;<span class="comment">//输出信号名</span></span><br><span class="line"><span class="keyword">reg</span> out;</span><br><span class="line"><span class="keyword">always</span> @ (sl <span class="keyword">or</span> a <span class="keyword">or</span> b)</span><br><span class="line">	<span class="keyword">if</span>(!sl)</span><br><span class="line">		out=a;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		out=b;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>带有与非门的二选一多路选择器<img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221227160502.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> muxtwo(out,a,b,sl);</span><br><span class="line"><span class="keyword">input</span> a,b,sl;<span class="comment">//输入信号名</span></span><br><span class="line"><span class="keyword">output</span> out; <span class="comment">//输出信号名 </span></span><br><span class="line"><span class="keyword">wire</span> nsl, sela, selb;<span class="comment">//定义内部连接线 </span></span><br><span class="line"><span class="keyword">assign</span> nsl= ~sl;<span class="comment">//求反 </span></span><br><span class="line"><span class="keyword">assign</span> sela= a &amp; nsl;<span class="comment">// 按位与运算 </span></span><br><span class="line"><span class="keyword">assign</span> selb= b &amp; sl; </span><br><span class="line"><span class="keyword">assign</span> out= sela | selb;<span class="comment">//按位或运算 </span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> muxtwo (out, a, b, sl); </span><br><span class="line"><span class="keyword">input</span> a, b, sl; </span><br><span class="line"><span class="keyword">output</span> out; <span class="keyword">not</span> u1(nsl, sl); </span><br><span class="line"><span class="keyword">and</span> #<span class="number">1</span> u2(sela, a, nsl); </span><br><span class="line"><span class="keyword">and</span> #<span class="number">1</span> u3(selb, b, sl); </span><br><span class="line"><span class="keyword">or</span> #<span class="number">1</span> u4(out, sela, selb); </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>上面这些例子都是可以综合的，所谓综合就是将HDL转化为电路并有源。</p>
<h2 id="2-3-Verilog用于模块的测试"><a href="#2-3-Verilog用于模块的测试" class="headerlink" title="2.3 Verilog用于模块的测试"></a>2.3 Verilog用于模块的测试</h2><p>Verilog还可以用来描述变化的测试信号，称为测试平台（testbench）。通过观测被测试模块的输出信号是否符合要求，可以调试和验证逻辑系统的设计和结构正确与否。<br>例如，将上例中的多路器模块进行测试</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">&#x27;<span class="keyword">include</span> <span class="string">&quot;muxtwo.v&quot;</span> <span class="keyword">module</span> t；</span><br><span class="line"><span class="keyword">reg</span> ain，bin，select； </span><br><span class="line"><span class="keyword">reg</span> clock； </span><br><span class="line"><span class="keyword">wire</span> outw； </span><br><span class="line"><span class="keyword">initial</span> <span class="comment">//把寄存器变量初始化为一的确定值 </span></span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">	ain = <span class="number">0</span>; </span><br><span class="line">	bin = <span class="number">0</span>; </span><br><span class="line">	select = <span class="number">0</span>; </span><br><span class="line">	clock = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">always</span> #<span class="number">50</span> clock=~clock； <span class="comment">//产生一个不断重复的周期为100个的时钟信号clock</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clock) </span><br><span class="line"><span class="keyword">begin</span> <span class="comment">// &#123;$random&#125;为系统任务，会产生一个随机数 </span></span><br><span class="line">#<span class="number">1</span> ain= &#123;<span class="built_in">$random</span>) % <span class="number">2</span>; <span class="comment">//产生随机的位信号流ain和bin，％2为模2运算 </span></span><br><span class="line">#<span class="number">3</span> bin= &#123;<span class="built_in">$random</span>&#125; % <span class="number">2</span>;<span class="comment">//分别延迟1和3个时间单位后产生随机的位信号流ain和bin</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">always</span> #<span class="number">10000</span> select = !select; <span class="comment">//产生周期为10000个单位时间的选通信号变化 //... </span></span><br><span class="line">muxtwo m(<span class="variable">.out</span>(outw)，<span class="variable">.a</span>(ain), <span class="variable">.b</span>(bin), <span class="variable">.sl</span>(select)); </span><br><span class="line"><span class="comment">/* 实例引用多路器，并加入测试信号流，以观察模块的输出out。其中，muxtwo是已经定义的 （行为的或结构的）模块，m表示在本测试模块中有一个名为m的muxtwo的模块，其四个端口分别 为：.out( )，.a( )，.b( )，.sl( )， . 表示端口；后面紧跟端口名，其名称必须与 muxtwo模块定义的端口名一致；小括号内的信号名为与该端口连接的信号线名，可以用别的名，但 必须在本模块中定义，说明其类型。 */</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<ul>
<li>RS出发器的测试<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先需要有rs_flipflop的Verilog描述</span></span><br><span class="line">timescale <span class="number">10</span>ns/<span class="number">1</span>ns</span><br><span class="line"><span class="keyword">module</span> rs_filpflop(q,qbar,r,s);</span><br><span class="line"><span class="keyword">output</span> q,qbar;</span><br><span class="line"><span class="keyword">input</span> r,s;</span><br><span class="line"><span class="keyword">nand</span> #<span class="number">1</span> (q,r,qbar);</span><br><span class="line"><span class="keyword">nand</span> #<span class="number">1</span> (qbar,s,q);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"><span class="comment">//然后验证</span></span><br><span class="line"><span class="keyword">module</span> text_rs_flipflop；</span><br><span class="line"><span class="keyword">reg</span> ts,tr;</span><br><span class="line"><span class="keyword">wire</span> tq,tqb;</span><br><span class="line">rs_flipflop u_rsff(<span class="variable">.q</span>(tq),<span class="variable">.s</span>(ts),<span class="variable">.r</span>(tr),<span class="variable">.qbar</span>(tqb));<span class="comment">//被测模块实例引用</span></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span><span class="comment">//第一个initial语句给出激励</span></span><br><span class="line">	tr=<span class="number">0</span>;</span><br><span class="line">	ts=<span class="number">0</span>;</span><br><span class="line">	#<span class="number">5</span> ts=<span class="number">1</span></span><br><span class="line">	#<span class="number">5</span> ts=<span class="number">0</span>;</span><br><span class="line">	tr=<span class="number">1</span></span><br><span class="line">	#<span class="number">5</span> ts=<span class="number">1</span>;</span><br><span class="line">	tr=<span class="number">0</span>;</span><br><span class="line">	#<span class="number">5</span> ts=<span class="number">0</span>；</span><br><span class="line">	#<span class="number">5</span> tr=<span class="number">1</span>；</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line">	<span class="built_in">$monitor</span>(<span class="string">&quot;at time %t,&quot;</span>,<span class="built_in">$time</span>,<span class="string">&quot;tr=%b,tq=%b,tqb=%b&quot;</span>,tr,ts,tq,tqb);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
输出的波形如下：<br><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221227162729.png"></li>
</ul>
<h2 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h2><p>通过众多例子可以看到：</p>
<ul>
<li>所有模块的内容都位于module和endmodule两个语句中间</li>
<li>模块是可以进行层次嵌套的</li>
<li>如果每个模块都是可以综合的，则通过综合工具可以把 它们的功能描述全都转换为最基本的逻辑单元描述，最 后可以用一个上层模块通过实例引用把这些模块连接起 来，把它们整合成一个很大的逻辑系统。</li>
<li>Verilog模块可以分为两种类型：一种是为了让模块最终能生成电路结构，另一种是为了测试所设计电路的逻辑功能是否正确。</li>
</ul>
<h1 id="第三章-模块的结构、数据类型、变量和基本运算符号"><a href="#第三章-模块的结构、数据类型、变量和基本运算符号" class="headerlink" title="第三章 模块的结构、数据类型、变量和基本运算符号"></a>第三章 模块的结构、数据类型、变量和基本运算符号</h1><p>[[第3章(2).pdf]]</p>
<h2 id="3-1-模块的结构"><a href="#3-1-模块的结构" class="headerlink" title="3.1 模块的结构"></a>3.1 模块的结构</h2><p>模块由两部分组成，一部分是接口，另一部分是描述逻辑功能，即定义输入时如何影响输出的。</p>
<ul>
<li>Verilog描述的基本单位：用于描述电路的功能、结构以及其他module的通信端口，能够表示：物理块，如IC或ASIC单元；逻辑块，如一个CPU设计的ALU部分；整个系统</li>
<li>描述方式<ul>
<li>数据流方式——连续幅值语句</li>
<li>行为方式——过程语句</li>
<li>结构方式——其他module和门级原语</li>
<li>混合方式——行为+结构+数据流等</li>
</ul>
</li>
<li>模块的构成：端口信息，输入输出说明，逻辑描述<br>  语法格式：说明部分+语句部分</li>
</ul>
<ol>
<li>模块端口的定义<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> 模块名（口<span class="number">1</span>，口<span class="number">2</span>，……）</span><br></pre></td></tr></table></figure></li>
<li>模块的内容：IO说明、内部信号声明和功能定义</li>
</ol>
<ul>
<li>IO说明的格式<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] 端口名<span class="number">1</span>；</span><br><span class="line"><span class="keyword">inout</span> [<span class="number">2</span>:<span class="number">0</span>] 端口名<span class="number">2</span>；</span><br><span class="line"><span class="comment">//也可以写在端口声明语句里面，格式：</span></span><br><span class="line"><span class="keyword">module</span> module_name （<span class="keyword">input</span> port1,<span class="keyword">output</span> port2）;</span><br></pre></td></tr></table></figure></li>
<li>内部信号说明：wire reg 类型的变量声明<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] R1,R2;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">1</span>:<span class="number">0</span>] w1,w2;</span><br></pre></td></tr></table></figure></li>
<li>功能定义：assign声明语句，用实例软件，用过程语句如always<ul>
<li>assign声明：assign，后面再加一个表达式即可</li>
<li>用示例元件：键入元件名字和项链的引脚，#后面为输出延迟。先写输出后写输入</li>
<li>always块：异步清零的D触发器<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assign</span> a=b&amp;c</span><br><span class="line"><span class="keyword">and</span> #<span class="number">2</span> u1(q,a,b)</span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> clr);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span>(clr)</span><br><span class="line">		q&lt;=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>（en）</span><br><span class="line">		q&lt;=d;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ol start="3">
<li>原则：<ul>
<li>所有过程块、连续赋值语句、实例引用都是并行的</li>
<li>他们表示的是一种通过变量名相互链接的关系</li>
<li>同一模块中者三者出现的先后秩序没有关系</li>
<li>只有连续赋值语句assign和实例引用语句可以独立于过程块而存在于模块的功能定义部分</li>
</ul>
</li>
</ol>
<h2 id="3-2-数据类型及其常数和变量"><a href="#3-2-数据类型及其常数和变量" class="headerlink" title="3.2 数据类型及其常数和变量"></a>3.2 数据类型及其常数和变量</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>区分大小写，必须以字母开头，转义标识符要以”&quot;开头，以空格结尾<br>模块、端口和实例的名字都是标识符<br>好的命名原则：使用有意义的名字，不要用$字符，结尾不用下划线。要用大小写混合的名字</p>
<h2 id="3-3-运算符及表达式"><a href="#3-3-运算符及表达式" class="headerlink" title="3.3 运算符及表达式"></a>3.3 运算符及表达式</h2>]]></content>
      <tags>
        <tag>Verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>DPS习题精析</title>
    <url>/2022/10/29/DPS%E4%B9%A0%E9%A2%98%E7%B2%BE%E6%9E%90/</url>
    <content><![CDATA[<p>本习题来源于课程习题以及作者本人的作业，将数字信号处理习题进行归纳整理，由于作者本人正处于课程学习阶段，如有问题请及时联系。作者QQ：544654722.</p>
<ul>
<li>第七章的作业题尚未整理</li>
<li>所有作业题需要重新巩固<span id="more"></span></li>
</ul>
<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="1-判断线性系统"><a href="#1-判断线性系统" class="headerlink" title="1. 判断线性系统"></a>1. 判断线性系统</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030225357.png"></p>
<h3 id="2-判断时不变性"><a href="#2-判断时不变性" class="headerlink" title="2. 判断时不变性"></a>2. 判断时不变性</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030225429.png"></p>
<h3 id="3-因果系统的判断"><a href="#3-因果系统的判断" class="headerlink" title="3. 因果系统的判断"></a>3. 因果系统的判断</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030225503.png"></p>
<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><h3 id="1-双边序列的z变换以及有限长序列的处理"><a href="#1-双边序列的z变换以及有限长序列的处理" class="headerlink" title="1. 双边序列的z变换以及有限长序列的处理"></a>1. 双边序列的z变换以及有限长序列的处理</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030230128.png">这道题中，z的正幂项的计算需要留心!其次还要注意在a的值讨论过程中一定要讨论全面。</p>
<h3 id="2-有限序列的z变换"><a href="#2-有限序列的z变换" class="headerlink" title="2. 有限序列的z变换"></a>2. 有限序列的z变换</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030231009.png"><br>这三道题很有代表性，对于有限长序列0和无穷点ROC选择时候遵循如下技巧：0左右数值的有无对应着收敛范围0和无穷处点可取和不可取；第三题中，收敛域的判断很有讲究：要从求和式中直接判断！</p>
<h3 id="3-z反变换——部分分式法"><a href="#3-z反变换——部分分式法" class="headerlink" title="3. z反变换——部分分式法"></a>3. z反变换——部分分式法</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030232038.png"><br>第一道题中，我们观察发现分子上为$z^2$而分母中只有两个z的多项式，因此需要对分子进行降低阶数处理，当然也可以直接约分为“时间常数式”，如右侧然后进行计算。</p>
<h3 id="4-z变换与卷积"><a href="#4-z变换与卷积" class="headerlink" title="4. z变换与卷积"></a>4. z变换与卷积</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030232743.png"><br>此题在求解过程中用到了一个移位性质，即时域$n-1$,z域$z^{-1}$</p>
<h3 id="5-系统函数：z变换与频率响应、求解幅度和相位"><a href="#5-系统函数：z变换与频率响应、求解幅度和相位" class="headerlink" title="5. 系统函数：z变换与频率响应、求解幅度和相位"></a>5. 系统函数：z变换与频率响应、求解幅度和相位</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221030233041.png"></p>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="1-求解z变换、收敛域和零极点图"><a href="#1-求解z变换、收敛域和零极点图" class="headerlink" title="1. 求解z变换、收敛域和零极点图"></a>1. 求解z变换、收敛域和零极点图</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031104858.png"><br><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031104912.png"><br><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031104935.png"></p>
<h3 id="2-直接卷积和z变换卷积"><a href="#2-直接卷积和z变换卷积" class="headerlink" title="2. 直接卷积和z变换卷积"></a>2. 直接卷积和z变换卷积</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031105030.png"></p>
<h3 id="3-IDFS"><a href="#3-IDFS" class="headerlink" title="3. IDFS"></a>3. IDFS</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031105717.png"></p>
<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><h3 id="1-公式默写"><a href="#1-公式默写" class="headerlink" title="1. 公式默写"></a>1. 公式默写</h3><p>学习本章前，必须对傅里叶变换、傅里叶级数、离散序列的傅里叶变换公式熟练记忆，默写如下：<br><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031080522.png"></p>
<h3 id="2-DFS——周期性冲激串和周期序列"><a href="#2-DFS——周期性冲激串和周期序列" class="headerlink" title="2. DFS——周期性冲激串和周期序列"></a>2. DFS——周期性冲激串和周期序列</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031081133.png"><br>左侧题目应当作为结论记忆，对于右侧例题，有固定解法如下：<br><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031081240.png"></p>
<h3 id="3-DFT"><a href="#3-DFT" class="headerlink" title="3. DFT"></a>3. DFT</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031082620.png"><br>右侧例题的正交特性是关键，复正弦序列的正交特性如下：<br><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031082737.png"></p>
<h3 id="4-DFS和DFT的对应关系"><a href="#4-DFS和DFT的对应关系" class="headerlink" title="4. DFS和DFT的对应关系"></a>4. DFS和DFT的对应关系</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031083623.png"></p>
<h3 id="5-DFT的圆周移位性质和圆周卷积"><a href="#5-DFT的圆周移位性质和圆周卷积" class="headerlink" title="5. DFT的圆周移位性质和圆周卷积"></a>5. DFT的圆周移位性质和圆周卷积</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031083604.png"><br>注意，考试中，卷积运算需要用图解法求解</p>
<h3 id="6-肉眼观察法求解IDFT"><a href="#6-肉眼观察法求解IDFT" class="headerlink" title="6. 肉眼观察法求解IDFT"></a>6. 肉眼观察法求解IDFT</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031085355.png"><br>其中前后两项对偶，如果不能直接看出来，那么就带入基本公式去计算。</p>
<h3 id="7-讨论采样点数对DFT的影响（了解）"><a href="#7-讨论采样点数对DFT的影响（了解）" class="headerlink" title="7. 讨论采样点数对DFT的影响（了解）"></a>7. 讨论采样点数对DFT的影响（了解）</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031090034.png"></p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h3 id="1-证明DFS的共轭性质"><a href="#1-证明DFS的共轭性质" class="headerlink" title="1. 证明DFS的共轭性质"></a>1. 证明DFS的共轭性质</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031105846.png"></p>
<h3 id="2-画幅值和相位谱"><a href="#2-画幅值和相位谱" class="headerlink" title="2. 画幅值和相位谱"></a>2. 画幅值和相位谱</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031110146.png"></p>
<h3 id="3-图解法求卷积"><a href="#3-图解法求卷积" class="headerlink" title="3. 图解法求卷积"></a>3. 图解法求卷积</h3><p> <img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031110216.png"><br> <img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031110227.png"></p>
<h3 id="4-零极点图、频率响应图、DFT图"><a href="#4-零极点图、频率响应图、DFT图" class="headerlink" title="4. 零极点图、频率响应图、DFT图"></a>4. 零极点图、频率响应图、DFT图</h3><p> <img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031110459.png"></p>
<h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h2><h3 id="1-数字滤波器的结构流图"><a href="#1-数字滤波器的结构流图" class="headerlink" title="1. 数字滤波器的结构流图"></a>1. 数字滤波器的结构流图</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031095424.png"><br>作者认为：并联形式中的常数项不是必须要提出来的，因此可以直接通过留数法直接求解</p>
<h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><h3 id="1-级联型和并联型"><a href="#1-级联型和并联型" class="headerlink" title="1. 级联型和并联型"></a>1. 级联型和并联型</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031095949.png"> <img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031100012.png"></p>
<h3 id="2-节点法的应用"><a href="#2-节点法的应用" class="headerlink" title="2. 节点法的应用"></a>2. 节点法的应用</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031100435.png"></p>
<h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><h2 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h2><h3 id="1-脉冲响应不变法求解数字滤波器的系统函数"><a href="#1-脉冲响应不变法求解数字滤波器的系统函数" class="headerlink" title="1. 脉冲响应不变法求解数字滤波器的系统函数"></a>1. 脉冲响应不变法求解数字滤波器的系统函数</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031103506.png"></p>
<h2 id="习题-2"><a href="#习题-2" class="headerlink" title="习题"></a>习题</h2><h3 id="1-脉冲响应不变法与双线性法"><a href="#1-脉冲响应不变法与双线性法" class="headerlink" title="1. 脉冲响应不变法与双线性法"></a>1. 脉冲响应不变法与双线性法</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031103858.png"></p>
<h3 id="2-模拟频率与数字频率的对应"><a href="#2-模拟频率与数字频率的对应" class="headerlink" title="2. 模拟频率与数字频率的对应"></a>2. 模拟频率与数字频率的对应</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031103922.png"></p>
<h3 id="3-用双线性法设计巴特沃斯低通滤波器"><a href="#3-用双线性法设计巴特沃斯低通滤波器" class="headerlink" title="3. 用双线性法设计巴特沃斯低通滤波器"></a>3. 用双线性法设计巴特沃斯低通滤波器</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031104031.png"></p>
<h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><h2 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h2><h3 id="1-用矩形窗设计带通滤波器"><a href="#1-用矩形窗设计带通滤波器" class="headerlink" title="1. 用矩形窗设计带通滤波器"></a>1. 用矩形窗设计带通滤波器</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031104350.png"></p>
<h3 id="2-线性相位正交变换"><a href="#2-线性相位正交变换" class="headerlink" title="2. 线性相位正交变换"></a>2. 线性相位正交变换</h3><p><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031104721.png"><br><img src="https://raw.githubusercontent.com/TianZhongxu/BlogImage/main/img/20221031104731.png"></p>
]]></content>
      <tags>
        <tag>DSP</tag>
      </tags>
  </entry>
</search>
